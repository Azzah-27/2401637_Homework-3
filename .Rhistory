labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_informative <- as.numeric(12)
beta_informative <- as.numeric(7)
# Defining parameters for weakly-informative prior
alpha_weakly <- as.numeric(1)
beta_weakly <- as.numeric(1)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Create data frames for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combine data frames
prior_data <- rbind(informative_data, weakly_data)
# Plot
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 1) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_informative <- as.numeric(12)
beta_informative <- as.numeric(7)
# Defining parameters for weakly-informative prior
alpha_weakly <- as.numeric(3)
beta_weakly <- as.numeric(1)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Create data frames for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combine data frames
prior_data <- rbind(informative_data, weakly_data)
# Plot
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 1) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_weakly <- as.numeric(1.5)
beta_weakly <- as.numeric(1.5)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Create data frames for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combine data frames
prior_data <- rbind(informative_data, weakly_data)
# Plot
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 1) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
mu <- rnorm(1, 67, 5)
sigma <- rexp(1, 0.5)
sim_students <- tibble(marks = rnorm(100, mu, sigma))
View(sim_students)
priors <- tibble(n = 1:50) %>% group_by(n) %>%
mutate(mu = rnorm(1, 67, 5), sigma = rexp(1, 0.5))
View(priors)
gen_prior_pred <- function(n, mu, sigma) {
x <- seq(0, 100, 0.1)
d <- tibble(n = n, mu = mu, sigma = sigma,
x = x,
y = dnorm(x, mu, sigma))
return(d)
}
prior_llh <- pmap_df(priors, gen_prior_pred)
ggplot(prior_llh, aes(x, y, group = mu)) +  geom_path(alpha = 0.25)
ggplot(prior_llh, aes(x, y, group = mu)) +  geom_path(alpha = 0.05)
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = mu)) +  geom_path(alpha = 0.5)
ggplot(prior_llh, aes(x, y, group = mu)) +  geom_path(alpha = 1)
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = mu)) +  geom_path(alpha = 5)
ggplot(prior_llh, aes(x, y, group = mu)) +  geom_path(alpha = 20)
marks <- seq(0, 1, by = 0.01)
alpha_informative <- as.numeric(12)
beta_informative <- as.numeric(7)
# Defining parameters for weakly-informative prior
alpha_weakly <- as.numeric(5)
beta_weakly <- as.numeric(3)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_informative <- as.numeric(12)
beta_informative <- as.numeric(7)
# Defining parameters for weakly-informative prior
alpha_weakly <- as.numeric(2)
beta_weakly <- as.numeric(1)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_informative <- as.numeric(12)
beta_informative <- as.numeric(7)
# Defining parameters for weakly-informative prior
alpha_weakly <- as.numeric(1)
beta_weakly <- as.numeric(1)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_weakly <- as.numeric(1)
beta_weakly <- as.numeric(2)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_weakly <- as.numeric(0.5)
beta_weakly <- as.numeric(2)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_weakly <- as.numeric(0.5)
beta_weakly <- as.numeric(1)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_weakly <- as.numeric(1.5)
beta_weakly <- as.numeric(1.5)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_weakly <- as.numeric(1.75)
beta_weakly <- as.numeric(1.75)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_weakly <- as.numeric(1.66)
beta_weakly <- as.numeric(1.66)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
alpha_weakly <- as.numeric(1.45)
beta_weakly <- as.numeric(1.45)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
rhyming_data <- read.csv('data/rhyming.csv')
library(tidyverse)
library(lme4)
rhyming_data <- read.csv('data/rhyming.csv')
library(tidyverse)
library(lme4)
rhyming_data <- read.csv('data/rhyming.csv')
rhyming_data <- read.csv('data/rhyming.csv')
rhyming_data_2 <- rhyming_data %>%
unite(stimulus, image_1, image_2, sep = "_") %>% #this is to merge columns image_1 and image_2 into a new column named stimulus
mutate (participant_number = row_number()) %>%
select(stimulus, rt, correct, type, VerbalScored, high_low_verbal, participant_number)
# Calculate the mean reaction time for each combination of `type` and `high_low_verbal`
summary_data <- rhyming_data_2 %>%
group_by(type, high_low_verbal) %>%
summarise(mean_rt = mean(rt))
# Plot the data using a bar graph
ggplot(summary_data, aes(x = type, y = mean_rt, fill = high_low_verbal)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Reaction Times by Stimulus Type and Level of Inner Voice",
x = "Stimulus Type",
y = "Reaction Time (ms)") +
theme_minimal()
rhyming_model <- lmer(data = rhyming_data, rt ~ type * high_low_verbal + (1 | worker_id))
summary(rhyming_model)
anova(rhyming_model)
marks <- seq(0, 1, by = 0.01)
# Define parameters for the Beta distribution
alpha <- as.numeric(13)
beta <- as.numeric(7)
# Calculate the probability density function (PDF) for the Beta distribution
y <- dbeta(marks, alpha, beta)
# Create a data frame for plotting
beta_data <- tibble(x = marks, y = y)
# Plot the Beta distribution
ggplot(beta_data, aes(x = marks, y = y)) +
geom_line(color = "red", linewidth = 1.5)
alpha_prior <- rnorm(1, 67, 5)
beta_prior <- rexp(1, 0.5)
# Simulate student marks from a Beta distribution
sim_students <- tibble(marks = rbeta(100, alpha_prior, beta_prior))
#create table of alpha and beta values for priors
priors <- tibble(n = 1:50) %>% group_by(n) %>%
mutate(alpha_prior = runif(1, 1, 5), beta_prior = runif(1, 1, 5))
# Function to compute the density for a given alpha and beta
gen_prior_pred <- function(n, alpha_prior, beta_prior) {
x <- seq(0, 100, 0.1)
d <- tibble(n = n, alpha = alpha_prior, beta = beta_prior,
x = x,
y = dbeta(x, alpha_prior, beta_prior))
return(d)
}
# apply function to each prior sample
prior_llh <- pmap_df(priors, gen_prior_pred)
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = interaction(alpha, beta))) +
geom_path(alpha = 0.25)
ggplot(prior_llh, aes(x, y, group = interaction(alpha, beta))) +
geom_path(alpha = 0.50)
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = interaction(alpha, beta))) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution Priors",
x = "Marks",
y = "Density") +
theme_minimal()
ggplot(prior_llh, aes(x, y, group = interaction(alpha, beta))) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution Priors",
x = "Marks",
y = "Density")
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = interaction(alpha, beta))) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
ggplot(prior_llh, aes(x, y, group = alpha_prior) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
ggplot(prior_llh, aes(x, y, group = alpha_prior)) +
ggplot(prior_llh, aes(x, y, group = alpha_prior)) +
geom_path(alpha = 0.50)
alpha_prior <- rnorm(1, 67, 5)
beta_prior <- rnorm(1, 0.5)
# Simulate student marks from a Beta distribution
sim_students <- tibble(marks = rbeta(100, alpha_prior, beta_prior))
#create table of alpha and beta values for priors
priors <- tibble(n = 1:50) %>% group_by(n) %>%
mutate(alpha_prior = runif(1, 1, 5), beta_prior = runif(1, 1, 5))
# Function to compute the density for a given alpha and beta
gen_prior_pred <- function(n, alpha_prior, beta_prior) {
x <- seq(0, 100, 0.1)
d <- tibble(n = n, alpha = alpha_prior, beta = beta_prior,
x = x,
y = dbeta(x, alpha_prior, beta_prior))
return(d)
}
# apply function to each prior sample
prior_llh <- pmap_df(priors, gen_prior_pred)
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = alpha_prior)) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = alpha_prior)) +
geom_path(alpha = 12) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
ggplot(prior_llh, aes(x, y, group = alpha_prior)) +
geom_path(alpha = 0.05) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
ggplot(prior_llh, aes(x, y, group = alpha_prior)) +
geom_path(alpha = 0.25) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = alpha_prior)) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
# Define the range of values for marks (0 to 1)
marks <- seq(0, 1, by = 0.01)
# Define parameters for the Beta distribution
alpha <- as.numeric(13)
beta <- as.numeric(7)
# Calculate the probability density function (PDF) for the Beta distribution
y <- dbeta(marks, alpha, beta)
# Create a data frame for plotting
beta_data <- tibble(x = marks, y = y)
# Plot the Beta distribution
ggplot(beta_data, aes(x = marks, y = y)) +
geom_line(color = "red", linewidth = 1.5)
#####3.3
# Defining parameters for informative prior
alpha_informative <- as.numeric(12)
beta_informative <- as.numeric(7)
#create a rnorm for both
# Defining parameters for weakly-informative prior
alpha_weakly <- as.numeric(1.50)
beta_weakly <- as.numeric(1.50)
# Calculate densities for informative and weakly informative priors
y_informative <- dbeta(marks, alpha_informative, beta_informative)
y_weakly <- dbeta(marks, alpha_weakly, beta_weakly)
# Creating tables for plotting
informative_data <- tibble(x = marks, y = y_informative, Prior = "Informative")
weakly_data <- tibble(x = marks, y = y_weakly, Prior = "Weakly-Informative")
# Combining data
prior_data <- rbind(informative_data, weakly_data)
# Plotting informative and weakly informative priors
ggplot(prior_data, aes(x = x, y = y, color = Prior)) +
geom_line (size= 0.5) +
labs(title = "Informative vs. Weakly-Informative Priors",
x = "Proportion",
y = "Density") +
theme_minimal()
#### 3.4
#using the code from the lecture
# μ ∼ N(67,5) σ ∼ Exp(0.5)
alpha_prior <- rnorm(1, 67, 5)
beta_prior <- rnorm(1, 0.5)
# Simulate student marks from a Beta distribution
sim_students <- tibble(marks = rbeta(100, alpha_prior, beta_prior))
#create table of alpha and beta values for priors
priors <- tibble(n = 1:50) %>% group_by(n) %>%
mutate(alpha_prior = runif(1, 1, 5), beta_prior = runif(1, 1, 5))
# Function to compute the density for a given alpha and beta
gen_prior_pred <- function(n, alpha_prior, beta_prior) {
x <- seq(0, 100, 0.1)
d <- tibble(n = n, alpha = alpha_prior, beta = beta_prior,
x = x,
y = dbeta(x, alpha_prior, beta_prior))
return(d)
}
# apply function to each prior sample
prior_llh <- pmap_df(priors, gen_prior_pred)
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = alpha_prior)) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
set.seed(100)
priors <- tibble(n = 1:50) %>%
group_by(n) %>%
mutate(alpha_prior = rgamma(1, 1, 5), # Gamma ensures alpha > 0
beta_prior = rgamma(1, 1, 5) # Gamma ensures beta > 0
)
gen_prior_pred <- function(n, alpha_prior, beta_prior) {
x <- seq(0, 100, 0.1)
d <- tibble(n = n, alpha = alpha_prior, beta = beta_prior,
x = x,
y = dbeta(x, alpha_prior, beta_prior))
return(d)
}
prior_llh <- pmap_df(priors, gen_prior_pred)
ggplot(prior_llh, aes(x, y, group = alpha_prior)) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
ggplot(prior_llh, aes(x, y, group = interaction(alpha, beta))) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
set.seed(100)
alpha_prior <- rnorm(1, 67, 5)
beta_prior <- rnorm(1, 0.5)
# Simulate student marks from a Beta distribution
sim_students <- tibble(marks = rbeta(100, alpha_prior, beta_prior))
#create table of alpha and beta values for priors
priors <- tibble(n = 1:50) %>%
group_by(n) %>%
mutate(alpha_prior = rgamma(1, 1, 5), # Gamma ensures alpha > 0
beta_prior = rgamma(1, 1, 5) # Gamma ensures beta > 0
)
# Function to compute the density for a given alpha and beta
gen_prior_pred <- function(n, alpha_prior, beta_prior) {
x <- seq(0, 100, 0.1)
d <- tibble(n = n, alpha = alpha_prior, beta = beta_prior,
x = x,
y = dbeta(x, alpha_prior, beta_prior))
return(d)
}
# apply function to each prior sample
prior_llh <- pmap_df(priors, gen_prior_pred)
#plotting prior predictions
ggplot(prior_llh, aes(x, y, group = interaction(alpha, beta))) +
geom_path(alpha = 0.50) +
labs(title = "Beta Distribution for Priors",
x = "Marks",
y = "Density")
